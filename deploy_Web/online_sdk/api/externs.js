ConnectOptions = function() {};
Globals = {};
LightstreamerClient = {};
Message = function() {};
MqttClient = function() {};
MQTTCoolListener = function() {};
MQTTCoolSession = function() {};
MqttStorage = function() {};
OnConnectionFailure = function() {};
OnConnectionLost = function() {};
OnConnectionNotAuthorized = function() {};
OnConnectionSuccess = function() {};
OnMessageArrived = function() {};
OnMessageDelivered = function() {};
OnMessageNotAuthorized = function() {};
OnReconnectionComplete = function() {};
OnReconnectionStart = function() {};
OnSubscriptionFailure = function() {};
OnSubscriptionNotAuthorized = function() {};
OnSubscriptionSuccess = function() {};
OnUnsubscribeFailure = function() {};
OnUnsubscribeSuccess = function() {};
openSession = function() {};
SubscribeOptions = function() {};
UnsubscribeOptions = function() {};
DefaultNodeJsStorage.prototype._getPath = function() {};
DefaultNodeJsStorage.prototype.get = function() {};
DefaultNodeJsStorage.prototype.keys = function() {};
DefaultNodeJsStorage.prototype.remove = function() {};
DefaultNodeJsStorage.prototype.set = function() {};
DefaultWebStorage.prototype.get = function() {};
DefaultWebStorage.prototype.keys = function() {};
DefaultWebStorage.prototype.remove = function() {};
DefaultWebStorage.prototype.set = function() {};
Env.decodeFromBase64 = function() {};
Env.encodeToBase64 = function() {};
Errors.evalMsg = function() {};
Errors.fromCode = function() {};
Json.decodeMessageFromJson = function() {};
Json.encodeMessageToJson = function() {};
MQTTCoolListener.prototype.onConnectionFailure = function() {};
MQTTCoolListener.prototype.onConnectionSuccess = function() {};
MQTTCoolListener.prototype.onLsClient = function() {};
MQTTCoolSession.prototype.close = function() {};
MQTTCoolSession.prototype.createClient = function() {};
MQTTCoolSessionImpl.prototype.'createClient' = function() {};
MQTTCoolSessionImpl.prototype.close = function() {};
MQTTCoolSessionImpl.prototype.createClient = function() {};
Message.prototype.destinationName = function() {};
Message.prototype.duplicate = function() {};
Message.prototype.payloadBytes = function() {};
Message.prototype.payloadString = function() {};
Message.prototype.qos = function() {};
Message.prototype.retained = function() {};
MqttClient.prototype.connect = function() {};
MqttClient.prototype.disconnect = function() {};
MqttClient.prototype.onConnectionLost = function() {};
MqttClient.prototype.onMessageArrived = function() {};
MqttClient.prototype.onMessageDelivered = function() {};
MqttClient.prototype.onMessageNotAuthorized = function() {};
MqttClient.prototype.onReconnectionComplete = function() {};
MqttClient.prototype.onReconnectionStart = function() {};
MqttClient.prototype.send = function() {};
MqttClient.prototype.subscribe = function() {};
MqttClient.prototype.unsubscribe = function() {};
MqttClientImpl.prototype._doUnsubscribe = function() {};
MqttClientImpl.prototype._stop = function() {};
MqttClientImpl.prototype.connect = function() {};
MqttClientImpl.prototype.disconnect = function() {};
MqttClientImpl.prototype.send = function() {};
MqttClientImpl.prototype.subscribe = function() {};
MqttClientImpl.prototype.unsubscribe = function() {};
MqttConnectOptions.prototype._debug = function() {};
MqttConnectOptions.prototype.getCleanSession = function() {};
MqttConnectOptions.prototype.getPassword = function() {};
MqttConnectOptions.prototype.getStorage = function() {};
MqttConnectOptions.prototype.getStorePath = function() {};
MqttConnectOptions.prototype.getUsername = function() {};
MqttConnectOptions.prototype.getWillMessage = function() {};
MqttConnectOptions.prototype.onFailure = function() {};
MqttConnectOptions.prototype.onNotAuthorized = function() {};
MqttConnectOptions.prototype.onSuccess = function() {};
MqttStorage.prototype.get = function() {};
MqttStorage.prototype.keys = function() {};
MqttStorage.prototype.remove = function() {};
MqttStorage.prototype.set = function() {};
MqttSubscribeOptions.prototype._subscribeOptions = function() {};
MqttSubscribeOptions.prototype.getQoS = function() {};
MqttSubscribeOptions.prototype.getRequestedMaxFrequency = function() {};
MqttSubscribeOptions.prototype.onFailure = function() {};
MqttSubscribeOptions.prototype.onNotAuthorized = function() {};
MqttSubscribeOptions.prototype.onSuccess = function() {};
MqttUnsubscribeOptions.prototype.onFailure = function() {};
MqttUnsubscribeOptions.prototype.onSuccess = function() {};
Objects.checkFunctions = function() {};
Objects.checkType = function() {};
Objects.checkTypeAndSet = function() {};
Objects.checkUTF8 = function() {};
Objects.invoke = function() {};
Objects.isEmpty = function() {};
Objects.makeErrorEvent = function() {};
Objects.makeEvent = function() {};
Packet.prototype.'aborted' = function() {};
Packet.prototype.'processed' = function() {};
Packet.prototype.immediateDelivery = function() {};
Packet.prototype.notified = function() {};
Packet.prototype.requireAck = function() {};
Packet.Type.CONNACK = function() {};
Packet.Type.CONNECT = function() {};
Packet.Type.DISCONNECT = function() {};
Packet.Type.PUBACK = function() {};
Packet.Type.PUBCOMP = function() {};
Packet.Type.PUBLISH = function() {};
Packet.Type.PUBREC = function() {};
Packet.Type.PUBREL = function() {};
Packet.Type.SUBACK = function() {};
Packet.Type.SUBSCRIBE = function() {};
Packet.Type.UNSUBACK = function() {};
Packet.Type.UNSUBSCRIBE = function() {};
Store.prototype._enabled = function() {};
Store.prototype._sequenceId = function() {};
Store.prototype._storageImpl = function() {};
Store.prototype._storeId = function() {};
Store.ITEM_STATE = function() {};
Store.ITEM_STATE.RECEIVED = function() {};
Store.ITEM_STATE.SENT = function() {};
Store.prototype.open = function() {};
Store.prototype.processInOrder = function() {};
Store.prototype.remove = function() {};
Store.prototype.store = function() {};
Types.BROKER_CONFIGURATION_NOT_VALID = function() {};
Types.BROKER_CONNECTION_REFUSED = function() {};
Types.CONFLICTING_SELECTOR = function() {};
Types.MQTT_BROKER_CONNECTION_ERROR = function() {};
Types.MQTTCOOL_CONNECTION_ERROR = function() {};
Types.MQTTCOOL_DISCONNECTION = function() {};
Types.SERVER_ERROR = function() {};
Types.SUCCESSFUL_DISCONNECTION = function() {};
Types.UNAUTHORIZED_CONNECTION = function() {};
Types.UNAUTHORIZED_PUBLISHING = function() {};
Types.UNAUTHORIZED_SESSION = function() {};
Types.UNAUTHORIZED_SUBSCRIPTION = function() {};
